pipeline {
    agent any
    environment {
        // Secrets stored in Jenkins Credentials
        DATABASE_PASSWORD = credentials('DATABASE_PASSWORD')
        CLERK_SECRET_KEY = credentials('CLERK_SECRET_KEY')
        STRIPE_SECRET_KEY = credentials('STRIPE_SECRET_KEY')
        OPENAI_API_KEY = credentials('OPENAI_API_KEY')
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY = credentials('NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY')
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY = credentials('NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY')
        NEXT_PUBLIC_CLERK_SIGN_IN_URL = credentials('NEXT_PUBLIC_CLERK_SIGN_IN_URL')
        NEXT_PUBLIC_CLERK_SIGN_UP_URL = credentials('NEXT_PUBLIC_CLERK_SIGN_UP_URL')
        CLERK_WEBHOOK_SECRET = credentials('CLERK_WEBHOOK_SECRET')

        // Minikube-specific
        KUBECONFIG = "~/.kube/config"
        MINIKUBE_VERSION = 'v1.34.0'
        MINIKUBE_IP = ""
    }
    stages {
        stage('Check and Install Docker') {
            steps {
                script {
                    // Install Docker if it's not installed
                    if (isUnix()) {
                        sh '''
                        if ! command -v docker &> /dev/null
                        then
                          echo "Docker not found, installing..."
                          apt-get update && apt-get install -y \
                              apt-transport-https \
                              ca-certificates \
                              curl \
                              gnupg2 \
                              software-properties-common

                          curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
                          add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
                          apt-get update && apt-get install -y docker-ce-cli
                        else
                          echo "Docker is already installed."
                        fi
                        '''
                    } else {
                        echo "Docker installation is only supported on Unix in this pipeline"
                    }
                }
            }
        }

        stage('Start Minikube Container') {
            steps {
                script {
                    // Start Minikube container if it's not running
                    sh '''
                    if ! docker ps | grep -q minikube-container; then
                        docker run -d --name=minikube-container --privileged -p 127.0.0.1:8443:8443 -v /var/lib/minikube:/var/lib/minikube -v /var/run/docker.sock:/var/run/docker.sock gcr.io/k8s-minikube/minikube-amd64:v1.34.0
                    else
                        echo "Minikube container already running."
                    fi
                    '''
                    // Get Minikube IP
                    MINIKUBE_IP = sh(script: 'docker inspect -f "{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}" minikube-container', returnStdout: true).trim()
                    echo "Minikube IP is ${MINIKUBE_IP}"
                }
            }
        }

        stage('Checkout Code') {
            steps {
                script {
                    // Ensure all sub-repositories are updated
                    sh 'meta git update'
                }
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Build Webapp') {
                    steps {
                        dir('webapp') {
                            sh '''
                            docker build --build-arg DATABASE_PASSWORD=${DATABASE_PASSWORD} \
                                          --build-arg CLERK_SECRET_KEY=${CLERK_SECRET_KEY} \
                                          --build-arg STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY} \
                                          --build-arg OPENAI_API_KEY=${OPENAI_API_KEY} \
                                          --build-arg NEXT_PUBLIC_API_URL=http://${MINIKUBE_IP}/api \
                                          --build-arg NEXT_PUBLIC_WEBAPP_URL=http://${MINIKUBE_IP} \
                                          --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY} \
                                          --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY} \
                                          --build-arg NEXT_PUBLIC_CLERK_SIGN_IN_URL=${NEXT_PUBLIC_CLERK_SIGN_IN_URL} \
                                          --build-arg NEXT_PUBLIC_CLERK_SIGN_UP_URL=${NEXT_PUBLIC_CLERK_SIGN_UP_URL} \
                                          -t webapp-tale-compendium:latest -f Dockerfile .
                            '''
                        }
                    }
                }
                stage('Build API') {
                    steps {
                        dir('api') {
                            sh '''
                            docker build --build-arg DATABASE_PASSWORD=${DATABASE_PASSWORD} \
                                          --build-arg CLERK_SECRET_KEY=${CLERK_SECRET_KEY} \
                                          --build-arg STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY} \
                                          --build-arg OPENAI_API_KEY=${OPENAI_API_KEY} \
                                          --build-arg NEXT_PUBLIC_API_URL=http://${MINIKUBE_IP}/api \
                                          --build-arg NEXT_PUBLIC_WEBAPP_URL=http://${MINIKUBE_IP} \
                                          --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY} \
                                          --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY} \
                                          --build-arg NEXT_PUBLIC_CLERK_SIGN_IN_URL=${NEXT_PUBLIC_CLERK_SIGN_IN_URL} \
                                          --build-arg NEXT_PUBLIC_CLERK_SIGN_UP_URL=${NEXT_PUBLIC_CLERK_SIGN_UP_URL} \
                                          -t api-tale-compendium:latest -f Dockerfile .
                            '''
                        }
                    }
                }
            }
        }

        stage('Load Docker Images into Minikube') {
            steps {
                script {
                    // Load the Docker images into Minikube
                    sh 'minikube image load webapp-tale-compendium:latest'
                    sh 'minikube image load api-tale-compendium:latest'
                }
            }
        }

        stage('Deploy with Terraform') {
            steps {
                dir('terraform/local') {
                    sh '''
                    terraform init
                    terraform apply -auto-approve -var="minikube_ip=${MINIKUBE_IP}"
                    '''
                }
            }
        }

        stage('Run Tests') {
            steps {
                sh 'echo "Running tests..."'
            }
        }

        stage('Cleanup') {
            steps {
                sh 'docker image prune -f'
            }
        }
    }
}
